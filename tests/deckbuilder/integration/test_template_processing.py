"""
Integration tests for template processing pipeline.
"""

import json
import os
import sys

import pytest

# Add parent directory to path for test imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "../../.."))  # noqa: E402

# Note: Legacy TemplateTestGenerator removed - using new structured frontmatter test system


@pytest.mark.integration
@pytest.mark.deckbuilder
class TestTemplateProcessing:
    """Integration tests for complete template processing."""

    def test_template_json_loading(self, default_template_json):
        """Test loading and parsing template JSON."""
        assert "template_info" in default_template_json
        assert "layouts" in default_template_json
        assert len(default_template_json["layouts"]) > 0

        # Verify template structure
        template_info = default_template_json["template_info"]
        assert "name" in template_info
        assert "version" in template_info

        # Verify layout structure
        layouts = default_template_json["layouts"]
        for _layout_name, layout_data in layouts.items():
            assert "index" in layout_data
            assert "placeholders" in layout_data
            assert isinstance(layout_data["placeholders"], dict)

    def test_structured_frontmatter_coverage(self, default_template_json):
        """Test that structured frontmatter examples cover template layouts."""
        from pathlib import Path

        # Check that our structured frontmatter test files exist
        test_files_dir = Path(__file__).parent.parent.parent.parent / "src/deckbuilder/structured_frontmatter_patterns/test_files"
        assert test_files_dir.exists()

        # Count example files
        example_files = list(test_files_dir.glob("example_*.json"))
        assert len(example_files) >= 24, f"Expected at least 24 example files, found {len(example_files)}"

        # Verify template layouts are covered
        template_layouts = set(default_template_json["layouts"].keys())
        covered_layouts = set()

        for example_file in example_files:
            with open(example_file, "r") as f:
                example_data = json.load(f)
                if "slides" in example_data and example_data["slides"]:
                    layout = example_data["slides"][0].get("layout")
                    if layout:
                        covered_layouts.add(layout)

        # Calculate coverage
        coverage_percentage = (len(covered_layouts & template_layouts) / len(template_layouts)) * 100
        assert coverage_percentage >= 95, f"Template layout coverage too low: {coverage_percentage}%"

    def test_structured_frontmatter_examples_are_valid(self):
        """Test that structured frontmatter examples are valid JSON."""
        from pathlib import Path

        test_files_dir = Path(__file__).parent.parent.parent.parent / "src/deckbuilder/structured_frontmatter_patterns/test_files"
        example_files = list(test_files_dir.glob("example_*.json"))

        for example_file in example_files:
            with open(example_file, "r") as f:
                try:
                    data = json.load(f)
                    # Verify basic structure
                    assert "slides" in data
                    assert isinstance(data["slides"], list)
                    assert len(data["slides"]) > 0
                    # Verify each slide has layout and placeholders
                    for slide in data["slides"]:
                        assert "layout" in slide
                        assert "placeholders" in slide
                except json.JSONDecodeError as e:
                    pytest.fail(f"Invalid JSON in {example_file}: {e}")

    def test_master_examples_files_are_current(self):
        """Test that master example files are up to date and comprehensive."""
        from pathlib import Path

        # Check master files exist
        assets_dir = Path(__file__).parent.parent.parent.parent / "src/deckbuilder/assets"
        master_json = assets_dir / "master_default_presentation.json"
        master_md = assets_dir / "master_default_presentation.md"

        assert master_json.exists(), "Master JSON file missing"
        assert master_md.exists(), "Master Markdown file missing"

        # Verify master JSON structure
        with open(master_json, "r") as f:
            master_data = json.load(f)

        assert "metadata" in master_data
        assert "slides" in master_data
        assert master_data["metadata"]["total_examples"] >= 24
        assert len(master_data["slides"]) >= 24

        # Verify master Markdown has all examples
        with open(master_md, "r") as f:
            md_content = f.read()

        # Should have proper structure
        assert "Generated by: `scripts/generate_master_examples.py`" in md_content
        assert "Total Examples: " in md_content
        assert md_content.count("## Example") >= 24
